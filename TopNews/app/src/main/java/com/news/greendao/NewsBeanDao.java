package com.news.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.news.bean.UserJoinNewsBean;

import com.news.bean.NewsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_BEAN".
*/
public class NewsBeanDao extends AbstractDao<NewsBean, Long> {

    public static final String TABLENAME = "NEWS_BEAN";

    /**
     * Properties of entity NewsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NewsId = new Property(0, Long.class, "newsId", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property ContentUrl = new Property(2, String.class, "contentUrl", false, "CONTENT_URL");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property ImageUrl = new Property(5, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ImageUrl2 = new Property(6, String.class, "imageUrl2", false, "IMAGE_URL2");
        public final static Property ImageUrl3 = new Property(7, String.class, "imageUrl3", false, "IMAGE_URL3");
        public final static Property Category = new Property(8, String.class, "category", false, "CATEGORY");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
    }

    private DaoSession daoSession;

    private Query<NewsBean> user_NewsListQuery;

    public NewsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: newsId
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT_URL\" TEXT," + // 2: contentUrl
                "\"AUTHOR\" TEXT," + // 3: author
                "\"TIME\" TEXT," + // 4: time
                "\"IMAGE_URL\" TEXT," + // 5: imageUrl
                "\"IMAGE_URL2\" TEXT," + // 6: imageUrl2
                "\"IMAGE_URL3\" TEXT," + // 7: imageUrl3
                "\"CATEGORY\" TEXT," + // 8: category
                "\"TYPE\" INTEGER NOT NULL );"); // 9: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsBean entity) {
        stmt.clearBindings();
 
        Long newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindLong(1, newsId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String contentUrl = entity.getContentUrl();
        if (contentUrl != null) {
            stmt.bindString(3, contentUrl);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(6, imageUrl);
        }
 
        String imageUrl2 = entity.getImageUrl2();
        if (imageUrl2 != null) {
            stmt.bindString(7, imageUrl2);
        }
 
        String imageUrl3 = entity.getImageUrl3();
        if (imageUrl3 != null) {
            stmt.bindString(8, imageUrl3);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(9, category);
        }
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsBean entity) {
        stmt.clearBindings();
 
        Long newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindLong(1, newsId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String contentUrl = entity.getContentUrl();
        if (contentUrl != null) {
            stmt.bindString(3, contentUrl);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(6, imageUrl);
        }
 
        String imageUrl2 = entity.getImageUrl2();
        if (imageUrl2 != null) {
            stmt.bindString(7, imageUrl2);
        }
 
        String imageUrl3 = entity.getImageUrl3();
        if (imageUrl3 != null) {
            stmt.bindString(8, imageUrl3);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(9, category);
        }
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void attachEntity(NewsBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewsBean readEntity(Cursor cursor, int offset) {
        NewsBean entity = new NewsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // newsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contentUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imageUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageUrl2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imageUrl3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // category
            cursor.getInt(offset + 9) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsBean entity, int offset) {
        entity.setNewsId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContentUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageUrl2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImageUrl3(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCategory(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsBean entity, long rowId) {
        entity.setNewsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsBean entity) {
        if(entity != null) {
            return entity.getNewsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsBean entity) {
        return entity.getNewsId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "newsList" to-many relationship of User. */
    public List<NewsBean> _queryUser_NewsList(String userName) {
        synchronized (this) {
            if (user_NewsListQuery == null) {
                QueryBuilder<NewsBean> queryBuilder = queryBuilder();
                queryBuilder.join(UserJoinNewsBean.class, UserJoinNewsBeanDao.Properties.NewsId)
                    .where(UserJoinNewsBeanDao.Properties.UserName.eq(userName));
                user_NewsListQuery = queryBuilder.build();
            }
        }
        Query<NewsBean> query = user_NewsListQuery.forCurrentThread();
        query.setParameter(0, userName);
        return query.list();
    }

}
